variables:
  BRANCH_NAME: $[ replace(variables['System.PullRequest.SourceBranch'], 'refs/heads/', '') ]
  GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle
trigger: none

pool:
  vmImage: ubuntu-latest

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v2.10.1
      endpoint: 'io-azure-devops-github-ro'

stages:
  - stage: BuildAndUnitTest
    jobs:
      - job: make_buildEndUnitTest
        steps:
          - task: Cache@2
            inputs:
              key: 'gradle | "$(Agent.OS)" | **/build.gradle.kts' # Swap build.gradle.kts for build.gradle when using Groovy
              restoreKeys: |
                gradle | "$(Agent.OS)"
                gradle
              path: $(GRADLE_USER_HOME)
            displayName: Configure gradle caching

          - task: SonarCloudPrepare@3
            displayName: 'Prepare SonarCloud analysis configuration'
            inputs:
              SonarCloud: '$(SONARCLOUD_SERVICE_CONN)'
              organization: '$(SONARCLOUD_ORG)'
              scannerMode: Other
              extraProperties: |
                sonar.projectKey=$(SONARCLOUD_PROJECT_KEY)
                sonar.projectName=$(SONARCLOUD_PROJECT_NAME)
                sonar.coverage.exclusions=**/config/*,**/*Mock*,**/model/*
                sonar.coverage.jacoco.xmlReportPaths=./build/reports/jacoco/test/jacocoTestReport.xml
                sonar.junit.reportPaths=./build/test-results/test

          - task: Gradle@3
            inputs:
              gradleWrapperFile: 'gradlew' # string. Alias: wrapperScript. Required. Gradle wrapper. Default: gradlew.
              tasks: 'build' # string. Required. Tasks. Default: build.
              publishJUnitResults: true
              testResultsFiles: '**/TEST-*.xml' # string. Required when publishJUnitResults = true. Test results files. Default: **/TEST-*.xml.
              codeCoverageToolOption: 'None' # 'None' | 'Cobertura' | 'JaCoCo'. Alias: codeCoverageTool. Code coverage tool. Default: None.
              codeCoverageClassFilesDirectories: 'build/classes/main/' # string. Alias: classFilesDirectories. Required when codeCoverageTool != None. Class files directories. Default: build/classes/main/.
              javaHomeOption: 'JDKVersion' # 'JDKVersion' | 'Path'. Alias: javaHomeSelection. Required. Set JAVA_HOME by. Default: JDKVersion.
              jdkVersionOption: '1.21' # 'default' | '1.11' | '1.10' | '1.9' | '1.8' | '1.7' | '1.6'. Alias: jdkVersion. Optional. Use when javaHomeSelection = JDKVersion. JDK version. Default: default.
              sonarQubeRunAnalysis: true

          - task: SonarCloudPublish@3
            displayName: 'Publish SonarCloud results on build summary'
            inputs:
              pollingTimeoutSec: '300'
          - script: |
              # stop the Gradle daemon to ensure no files are left open (impacting the save cache operation later)
              ./gradlew --stop
            displayName: Gradlew stop

          - task: PublishCodeCoverageResults@2
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: 'build/reports/jacoco/test/jacocoTestReport.xml'
              reportDirectory: 'build/reports/jacoco/test/html'
            displayName: 'Publish Code Coverage on Azure Devops'
            
  - stage: IntegrationTest
    dependsOn: [ ]
    jobs:
        - job: make_integration_test
          steps:
            - script: |
                docker compose up -d
              displayName: 'Run app with docker-compose'
            - script: |
                timeout 180 bash -c '
                while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8080/actuator/health/liveness)" != "200" ]]; do 
                  echo "Waiting for liveness check..."
                  sleep 5
                done
                echo "Checking readiness..."
                curl -v localhost:8080/actuator/health/readiness
                ' || exit 1
              displayName: 'Health check pagopa-qi-fdr-kpi-service'
            - script: yarn global add newman
              displayName: 'newman installation'
            - script: |
                newman run api-tests/v1/qi-fdrkpi.api.tests.local.json --environment=api-tests/env/fdrkpi_local.env.json --reporters cli,junit --reporter-junit-export Results/fdrkpi-api-TEST.xml
              displayName: 'Run FdR KPI API test'
              continueOnError: false
            - task: PublishTestResults@2
              inputs:
                testResultsFormat: 'JUnit'
                testResultsFiles: '**/*-TEST.xml'
                searchFolder: '$(System.DefaultWorkingDirectory)'

  - stage: CheckCommitAndDeploy
    displayName: "Check Commit Message and Deploy"
    dependsOn: [ ]
    jobs:
    - job: FilterCommits
      displayName: "Filter Commits"
      steps:
      - checkout: self
      - task: Bash@3
        name: FilterCommitsScript
        inputs:
          targetType: "inline"
          script: |
            echo "Checking for commit message with suffix 'TODEPLOY'..."
            commits=$(git log --pretty=%B HEAD^..HEAD)

            if echo "$commits" | grep -q "TODEPLOY"; then
              echo "Commit message with 'TODEPLOY' found. Proceeding to deploy..."
              echo "##vso[task.setvariable variable=shouldDeploy;isOutput=true]true"
            else
              echo "No commit message with 'TODEPLOY' found. Skipping deploy."
              echo "##vso[task.setvariable variable=shouldDeploy;isOutput=true]false"
            fi
          failOnStderr: true


# --- START Deploy DEV --- #
  - stage: 'Build_and_deploy_for_DEV'
    displayName: 'Build for DEV'
    dependsOn: CheckCommitAndDeploy
    condition: eq(stageDependencies.CheckCommitAndDeploy.FilterCommits.outputs['FilterCommitsScript.shouldDeploy'], 'true')
    jobs:
    - job: Build_docker
      displayName: Build docker with Build.SourceVersion as TAG for DEV
      steps:
        - template: templates/docker-release/template.yaml@pagopaCommons
          parameters:
            CONTAINER_REGISTRY_SERVICE_CONN: $(DEV_CONTAINER_REGISTRY_SERVICE_CONN)
            CONTAINER_REGISTRY_FQDN: $(DEV_CONTAINER_NAMESPACE)
            DOCKER_IMAGE_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
            DOCKER_IMAGE_TAG: $(Build.SourceVersion)
            FORCE_REPLACE_DOCKER_IMAGE: false
  
    - deployment: "deploy"
      dependsOn: Build_docker
      environment: 'DEV'
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
                displayName: "Checkout"
              - task: Bash@3
                name: update_chart_version
                displayName: 'Setup helm microservice chart'
                inputs:
                  targetType: "inline"
                  script: |
                    helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                    helm dep build helm
              - template: azure-templates/helm-microservice-chart-deploy.yml
                parameters:
                  DO_DEPLOY: true
                  ENV: 'DEV'
                  KUBERNETES_SERVICE_CONN: $(DEV_KUBERNETES_SERVICE_CONN)
                  NAMESPACE: qi
                  APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
                  VALUE_FILE: "helm/values-dev.yaml"
                  GREEN_VERSION: $(Build.SourceVersion)